# Changes to the Schema

This file details the changes I've made to the schema.

v1:
* Changed spacing to make it easier to read.
* Added a schema "title".
* Added "description" values.
* Changed single-value enums to "const".
* Changed "bitfield" to "bit" because a "bitfield" is technically a collection
  of bits.
* Removed the "size" property of the "bitfield" type in "field". This can be
  inferred from the data.
* Combined all the simple types into one. This contains:
  * bool
  * hostname
  * ipv4
  * ipv6
  * uid
* Reordered things to make it match the mental model and also to make it easier
  to read.
* Removed "minimum" and "maximum" from the "label" type because there shouldn't
  be assumptions about the possible values. For example, the range 0-(2^31-1)
  disregards negative values. This is mixing the "layers" in how to define a
  schema: I think what was intended was for two additional fields: "minimum" and
  "maximum" at the user level, not this schema level. However, this is not
  appropriate either because it's up to the user to define the value and its
  range, not us.
* Changed the "label" property in the "label" type to "name", for consistency.
* Changed "label" to "labeledInteger".
* Changed "max_size" and "min_size" to "maxLength" and "minLength", for
  consistency with JSON schema naming conventions.
* Changed "bitfield" to "bitField" because it's two words.
* Added '"uniqueItems": true' to the "bits" field of the "bitField" field type.
* Added '"uniqueItems": true' to the integer field type.
* Deleted "get_subdevice_range" and "set_subdevice_range" because it's not clear
  what they're for.
* Factoring out all the possible "field" types.
* Added a new "packedFields" field type that represents a list of length/data
  pairs. Note that there's no minimum/maximum count as it's unneeded.
* Changed all names to use the "name" type reference.
* Added a "maximum" of 65535 to the "version" field.
* Changed the "command" type to "array" and removing the intermediary "fields"
  property. There's no minimum size because, in theory, a message may contain
  zero bytes.
* Added a "name" to the "bitField" type.
* Added '"uniqueItems": true' to "command".
* Added '"uniqueItems": true' to "ranges".
* Added a new "pdEnvelope" type.
* Added a new "list" type that represents a list of any valid non-list
  field type.
* Removed the requirement of having "name" for some of the types so they can
  also be used in lists.
* Suffixed all the types with "Type" so that naming is consistent. These aren't
  the words that will be used when writing a schema and they don't have to be
  the same as the constant names, eg. "uint8" or "string" or "list".
* Added a "compoundType" type so that we don't have to make a special type for
  all possibilities. For example, the list of 3-field items returned
  in SLOT_INFO. These compound types are only supported in the list type,
  "listType", because a field is only used in "commandType".
* Added 12 examples, most with lists of compound (packed) types.
* Think of "listType" as a holder for a "packed" list of things, where each
  "thing" can be a simple or compound type.

v2:
* Factored all the types into a "oneOf" so that it can be referenced from
  "compoundType", "listType", and "fieldType".
* Changed "boundedIntegerType" to "integerType" and "boundedStringType"
  to "stringType".
* Removed "name" from the "required" list of "labeledIntegerType"
  and "listType".
* Changed some descriptions.
* Changed "upper" and "lower" in "rangeType" to "maximum" and "minimum",
  respectively, for consistency with JSON schema naming conventions.
* Added an optional "length" property to "pdEnvelope".

v3:
* Removed "fieldType" and instead made "commandType" be a collection
  of "oneOfTypes".

v4:
* Added "url" and "mac" to "simpleType".
* Changed "version" minimum to 1 from 0.

v5:
* Changed "version" minimum back to 0 because I'm not convinced it should be a
  schema check. It's just a two-byte number. There's no reason to put this
  restriction on someone's message.
* Added a "uri" "simpleType". Yes, it's a superset of a URL, but people may wish
  to use one or both because URLs are so common.
* Added "name" to the "required" list in "labeledIntegerType", per Peter N.
* Added "int128" and "uint128" to "integerType".
* Added a "length" maximum of 255, per Peter N.
* Updated the description for "commandType" to clarify that it represents the
  contents of a command.
* Changed "definitions" to "$defs", per the 2019-09 draft.
* Added missing "type":"object" to "stringType", "bitFieldType",
  and "integerType".
* Added "uuid" to "simpleType".
* Updated the "simpleType" description to state its purpose as a catch-all list
  of likely values.
* Added a "subdeviceType" for specifying which subdevices a GET or SET request
  can be sent to. The default is the union of all of the enum values.
* Changed "$schema" to "https://json-schema.org/draft/2019-09/schema".

v6:
* Added a description to "pid" and "version".
* Improved the description of "subdeviceType".
* Changed default subdevice ranges in GET and SET to just ["root"].
  Comments on this choice welcome.

v7:
* Removed the word, "informative", from the description and title.

v8:
* Updated the "bitFieldType" description to add the sentence: "Implementations
  are likely to store the values in a structure having a multiple of 8 bits."
  It's not possible using the JSON schema to restrict an array count to a
  multiple of 8. Additionally, if we added the "size" property as before,
  there's currently no clean way of guaranteeing its value is at least as large
  as the array element count.
* Added a "reserved" property to "bitType" to indicate that a bit is unused or
  reserved. This helps with padding the bit count in a bit field to be a
  multiple of 8.
* Changed the "bool" item in "simpleType" to "boolean" so that it matches the
  JSON schema word, for consistency.
* Updated the "stringType" description to add the sentence: "Implementations
  might need to use a NUL terminator for multi-field messages where a string is
  followed by another field so that its boundary can be determined."
* Updated the SUPPORTED_PARAMETERS_ENHANCED example to use a bit field.
* Added an "$id" field with the value "#placeholder".
* Need to discuss:
  * Either removing these: "int128, uint128, hostname, mac, uri, uuid", or
    defining them in Table A-15 of the new RDM spec.
  * What will the value of "$id" be?
  * Clarifying that any string-based types (eg. uuid, mac, hostname, random
    other strings) need to be NUL-terminated if the field is followed by
    another, so that its length can be determined.
  * Clarifying that a version number is an 8-bit byte instead of "the version
    shall start at zero". The second seems too proscriptive and the first
    accomplishes the same thing without inflaming those whose opinion says that
    versions MUST start at 1.

v9:
* Using "http://estalink.us/jsonschema" for the "$id" value.
* Need to discuss:
  * Should the ID link "https" instead of "http"? (Obviously, would change in
    the spec too.)

v10: [This was the latest after the discussion.]
* Removed integer types "int128" and "uint128", and removed simple type "uri"
  because, sadly, they're not in the current E1.20 spec. :(
* Changed the word "might" to "may" in the description for "stringType".

v11:
* Added a "duplicateCommandType" that can specify that one command has the same
  contents as another command. The GET/SET request/response commands can now
  either be a "commandType" or a "duplicateCommandType".
* Updated the DEVICE_LABEL.json example to illustrate using a duplicate command.
* Added a "refType" to the "oneOfTypes" list so that other parts can also be
  duplicated. For example, maybe one of the items in a command needs to
  duplicate another command item, either in the same or a different commmand.
  It is of type "json-pointer", see https://tools.ietf.org/html/rfc6901.
* Changed "simpleType" to be of type "anyOf an enum". In other words, other
  strings not in the list are allowed, so that there can exist manufacturer-
  specific types.
