{
  "$id": "http://estalink.us/jsonschema",
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "title": "Parameter Metadata Language Schema",
  "description": "The schema for the Parameter Metadata Language from Section 5 of E1.37-5. This schema is subject to change.",
  "$defs": {
    "bitType": {
      "description": "Describes the meaning of one bit in a bit field.",
      "type": "object",
      "properties": {
        "name": { "$ref": "#/$defs/nameType" },
        "displayName": { "$ref": "#/$defs/nameType" },
        "notes": { "type": "string" },
        "index": {
          "type": "integer",
          "minimum": 0
        },
        "reserved": {
          "description": "Indicates that this bit is unused or reserved.",
          "type": "boolean",
          "default": false
        }
      },
      "required": [ "name", "index" ]
    },
    "bitFieldType": {
      "description": "A bit field, a collection of 'bit' items. Implementations are likely to store the values in a structure having a multiple of 8 bits.",
      "type": "object",
      "properties": {
        "name": { "$ref": "#/$defs/nameType" },
        "displayName": { "$ref": "#/$defs/nameType" },
        "notes": { "type": "string" },
        "type": { "const": "bitField" },
        "bits": {
          "type": "array",
          "items": { "$ref": "#/$defs/bitType" },
          "uniqueItems": true
        }
      },
      "required": [ "type", "bits" ]
    },
    "booleanType": {
      "description": "A Boolean value.",
      "type": "object",
      "properties": {
        "name": { "$ref": "#/$defs/nameType" },
        "displayName": { "$ref": "#/$defs/nameType" },
        "notes": { "type": "string" },
        "type": { "const": "boolean" }
      },
      "required": [ "type" ]
    },
    "bytesType": {
      "description": "A list of bytes. The minimum and maximum length properties are not required, but it is a good idea to specify their values for unknown bytes types.",
      "type": "object",
      "properties": {
        "name": { "$ref": "#/$defs/nameType" },
        "displayName": { "$ref": "#/$defs/nameType" },
        "notes": { "type": "string" },
        "type": { "const": "bytes" },
        "interpretation": {
          "description": "This field describes how to interpret the value. It can be one of the bytes types defined in \"Table A-15: Data Type Defines\" of the RDM E1.20 specification (or other add-on specifications), or it can be something manufacturer-specific. Be aware, however, that anything not defined here may not be understood by a controller or UI. The known bytes types include: ipv4 (4 bytes), ipv6 (16 bytes), mac (6 bytes), uid (6 bytes), and uuid (16 bytes).",
          "type": "string"
        },
        "reference": {
          "description": "An informative URL pointing to a specification or more information for this field type.",
          "type": "string",
          "format": "uri-reference"
        },
        "minLength": {
          "description": "The minimum bytes length. Care must be taken to make sure this doesn't contradict any \"maxLength\" value.",
          "type": "integer",
          "minimum": 0
        },
        "maxLength": {
          "description": "The maximum bytes length. Care must be taken to make sure this doesn't contradict any \"minLength\" value.",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [ "type" ]
    },
    "commandType": {
      "description": "Represents the contents of an RDM command, a collection of 'field' items, each a simple or compound type.",
      "type": "array",
      "items": { "$ref": "#/$defs/oneOfTypes" },
      "uniqueItems": true
    },
    "compoundType": {
      "description": "Defines a compound type, a type used to combine other types. This is useful for including in lists.",
      "type": "object",
      "properties": {
        "name": { "$ref": "#/$defs/nameType" },
        "displayName": { "$ref": "#/$defs/nameType" },
        "notes": { "type": "string" },
        "type": { "const": "compound" },
        "subtypes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/oneOfTypes"
          }
        }
      },
      "required": [ "type", "subtypes" ]
    },
    "duplicateCommandType": {
      "description": "Indicates that a command is a duplicate of one of the other commands. Using this feature can potentially save space.",
      "enum": [
        "get_request",
        "get_response",
        "set_request",
        "set_response"
      ]
    },
    "integerType": {
      "description": "A signed or unsigned integer, can have an optional prefix, unit, and range.",
      "type": "object",
      "properties": {
        "name": { "$ref": "#/$defs/nameType" },
        "displayName": { "$ref": "#/$defs/nameType" },
        "notes": { "type": "string" },
        "type": {
          "enum": [
            "int8",
            "int16",
            "int32",
            "int64",
            "uint8",
            "uint16",
            "uint32",
            "uint64"
          ]
        },
        "labels": {
          "description": "A list of labels that name special values.",
          "type": "array",
          "items": { "$ref": "#/$defs/labeledIntegerType" },
          "uniqueItems": true
        },
        "prefix": {
          "description": "The unit prefix, defined in Table A-14 of E1.20.",
          "type": "integer",
          "minimum": 0,
          "maximum": 255
        },
        "ranges": {
          "description": "A list of possible ranges for the value. The complete range is the union of all the ranges.",
          "type": "array",
          "items": { "$ref": "#/$defs/rangeType" },
          "uniqueItems": true
        },
        "unit": {
          "description": "The unit type, defined in Table A-13 of E1.20.",
          "type": "integer",
          "minimum": 0,
          "maximum": 255
        }
      },
      "required": [ "type" ]
    },
    "labeledIntegerType": {
      "description": "Associates a name to an integer value.",
      "type": "object",
      "properties": {
        "label": { "$ref": "#/$defs/nameType" },
        "value": { "type": "integer" }
      },
      "required": [ "label", "value" ]
    },
    "listType": {
      "description": "A list of objects all having the same type.",
      "type": "object",
      "properties": {
        "name": { "$ref": "#/$defs/nameType" },
        "displayName": { "$ref": "#/$defs/nameType" },
        "notes": { "type": "string" },
        "type": { "const": "list" },
        "itemType": { "$ref": "#/$defs/oneOfTypes" },
        "minItems": {
          "description": "The minimum list size.",
          "type": "integer",
          "minimum": 0
        },
        "maxItems": {
          "description": "The maximum list size.",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [ "type", "itemType" ]
    },
    "nameType": {
      "description": "A name is a string having a length of at least 1.",
      "type": "string",
      "minLength": 1
    },
    "oneOfTypes": {
      "description": "One of any of the types. This provides a single location to keep the list.",
      "oneOf": [
        { "$ref": "#/$defs/bitFieldType" },
        { "$ref": "#/$defs/booleanType" },
        { "$ref": "#/$defs/bytesType" },
        { "$ref": "#/$defs/compoundType" },
        { "$ref": "#/$defs/integerType" },
        { "$ref": "#/$defs/listType" },
        { "$ref": "#/$defs/pdEnvelopeType" },
        { "$ref": "#/$defs/refType" },
        { "$ref": "#/$defs/stringType" }
      ]
    },
    "pdEnvelopeType": {
      "description": "Contains a length/data pair for one Parameter Data item, where the length is an unsigned 8-bit value and the data has 'length' bytes. This exists to provide a schema definition for the 'envelope' of a PDL/PD pair.",
      "type": "object",
      "properties": {
        "type": { "const": "pdEnvelope" },
        "length": {
          "description": "The data length can be optionally specified.",
          "type": "integer",
          "minimum": 0,
          "maximum": 255
        }
      },
      "required": [ "type" ]
    },
    "rangeType": {
      "description": "Defines an inclusive range of numbers.",
      "type": "object",
      "properties": {
        "minimum": {
          "description": "The lower bound, inclusive.",
          "type": "integer"
        },
        "maximum": {
          "description": "The upper bound, inclusive.",
          "type": "integer"
        }
      },
      "required": [ "minimum", "maximum" ]
    },
    "refType": {
      "description": "Defines a reference to the contents of another object or array. See RFC 6901.",
      "type": "object",
      "proprties": {
        "ref": {
          "description": "The reference pointer.",
          "type": "string",
          "format": "json-pointer"
        }
      },
      "required": [ "ref" ]
    },
    "stringType": {
      "description": "A UTF-8-encoded string having a possibly bounded size. Implementations may need to use either a NUL terminator or another \"length\" field for multi-field messages where a string is followed by another field, so that its boundary can be determined.",
      "type": "object",
      "properties": {
        "name": { "$ref": "#/$defs/nameType" },
        "displayName": { "$ref": "#/$defs/nameType" },
        "notes": { "type": "string" },
        "type": { "const": "string" },
        "interpretation": {
          "description": "This field describes how to interpret the string value. It can be one of the string types defined in \"Table A-15: Data Type Defines\" of the RDM E1.20 specification (or other add-on specifications), or it can be something manufacturer-specific. Be aware, however, that anything not defined here may not be understood by a controller or UI. The known string types include: hostname, domain-name, string, and url",
          "type": "string"
        },
        "pattern": {
          "description": "An ECMA 262 regular expression that can be used to validate the contents of this field. They're helpful for assisting a controller or UI do message validation. It's not necessary to provide a pattern for known \"interpretation\" types. Note that care must be taken to make sure that patterns don't contradict any \"minLength\" and \"maxLength\" values. As well, if there are maximum or minimum sizes, it is suggested that an instance makes use of the \"minLength\" and \"maxLength\" sizes in order to support those UIs that don't support regexes.",
          "type": "string",
          "format": "regex"
        },
        "reference": {
          "description": "An informative URL pointing to a specification or more information for this field type.",
          "type": "string",
          "format": "uri-reference"
        },
        "minLength": {
          "description": "The minimum string length. Care must be taken to make sure this doesn't contradict any \"pattern\" or \"maxLength\" values. If there are maximum or minimum sizes, it is suggested that an instance makes use of the \"minLength\" and \"maxLength\" sizes in order to support those UIs that don't support regexes.",
          "type": "integer",
          "minimum": 0
        },
        "maxLength": {
          "description": "The maximum string length. Care must be taken to make sure this doesn't contradict any \"pattern\" or \"minLength\" values. If there are maximum or minimum sizes, it is suggested that an instance makes use of the \"minLength\" and \"maxLength\" sizes in order to support those UIs that don't support regexes.",
          "type": "integer",
          "minimum": 0
        }
      },
      "required": [ "type" ]
    },
    "subdeviceType": {
      "description": "Acceptable values for the subdevice in a GET or SET command. An empty list means allow nothing.",
      "type": "array",
      "items": {
        "enum": [
          "root",
          "subdevices",
          "broadcast"
        ]
      },
      "uniqueItems": true
    }
  },
  "type": "object",
  "properties": {
    "name": { "$ref": "#/$defs/nameType" },
    "displayName": { "$ref": "#/$defs/nameType" },
    "notes": { "type": "string" },
    "pid": {
      "description": "The parameter ID.",
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },
    "version": {
      "description": "This is the parameter descriptor version.",
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },
    "get_request_subdevice_range": {
      "$ref": "#/$defs/subdeviceType",
      "default": [ "root" ]
    },
    "get_request": {
      "oneOf": [
        { "$ref": "#/$defs/commandType" },
        { "$ref": "#/$defs/duplicateCommandType" }
      ]
    },
    "get_response": {
      "oneOf": [
        { "$ref": "#/$defs/commandType" },
        { "$ref": "#/$defs/duplicateCommandType" }
      ]
    },
    "set_request_subdevice_range": {
      "$ref": "#/$defs/subdeviceType",
      "default": [ "root" ]
    },
    "set_request": {
      "oneOf": [
        { "$ref": "#/$defs/commandType" },
        { "$ref": "#/$defs/duplicateCommandType" }
      ]
    },
    "set_response": {
      "oneOf": [
        { "$ref": "#/$defs/commandType" },
        { "$ref": "#/$defs/duplicateCommandType" }
      ]
    }
  },
  "required": [ "name", "pid", "version" ],
  "dependencies": {
    "get_request": [ "get_response" ],
    "get_response": [ "get_request" ],
    "set_request": [ "set_response" ],
    "set_response": [ "set_request" ]
  }
}
