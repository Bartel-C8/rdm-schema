{
  "$id": "http://estalink.us/jsonschema",
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "title": "Parameter Message",
  "description": "The schema for the Parameter Metadata Language from Section 5 of E1.37-5. This schema is subject to change.",
  "type": "object",
  "$ref": "#/$defs/commonPropertiesForNamed",
  "properties": {
    "pid": {
      "description": "The parameter ID.",
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },
    "version": {
      "description": "This is the parameter descriptor version.",
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },
    "get_request_subdevice_range": {
      "$ref": "#/$defs/subdeviceType",
      "default": [ "root" ]
    },
    "get_request": { "$ref": "#/$defs/commandType" },
    "get_response": { "$ref": "#/$defs/commandType" },
    "set_request_subdevice_range": {
      "$ref": "#/$defs/subdeviceType",
      "default": [ "root" ]
    },
    "set_request": { "$ref": "#/$defs/commandType" },
    "set_response": { "$ref": "#/$defs/commandType" }
  },
  "unevaluatedProperties": false,
  "required": [ "name", "pid", "version" ],
  "dependentRequired": {
    "get_request": [ "get_response" ],
    "get_response": [ "get_request" ],
    "set_request": [ "set_response" ],
    "set_response": [ "set_request" ]
  },
  "$defs": {
    "bitType": {
      "description": "Describes the meaning of one bit in a bit field.",
      "type": "object",
      "$ref": "#/$defs/commonPropertiesForNamed",
      "properties": {
        "index": {
          "type": "integer",
          "minimum": 0
        },
        "reserved": {
          "description": "Indicates that this bit is unused or reserved.",
          "type": "boolean"
        },
        "reservedValue": {
          "description": "The assumed value when the bit is marked as reserved.",
          "type": "boolean",
          "default": false
        }
      },
      "unevaluatedProperties": false,
      "required": [ "name", "index" ]
    },
    "bitFieldType": {
      "description": "A bit field, a collection of 'bit' items. The \"size\" field is used to specify the number of bits, a multiple of 8, in this bit field. It is an error if the size is less than the number of defined bits. Bits that are not specified are assumed to be reserved, with a value equal to the \"unspecifiedValues\" value.",
      "type": "object",
      "$ref": "#/$defs/commonPropertiesForNamed",
      "properties": {
        "type": { "const": "bitField" },
        "bits": {
          "type": "array",
          "items": { "$ref": "#/$defs/bitType" },
          "uniqueItems": true
        },
        "size": {
          "description": "The size, in multiples-of-8 bits, of this bit field. It is an error if the size is less than the number of defined bits.",
          "type": "integer",
          "minimum": 0,
          "multipleOf": 8
        },
        "unspecifiedValues": {
          "description": "The default value to use for any unspecified bits.",
          "type": "boolean",
          "default": false
        }
      },
      "unevaluatedProperties": false,
      "required": [ "type", "size", "bits" ]
    },
    "booleanType": {
      "description": "A Boolean value. This corresponds to the DS_BOOLEAN type in \"Table A-15: Data Type Defines\" of the RDM E1.20 specification, a 1-byte zero-or-one value.",
      "type": "object",
      "$ref": "#/$defs/commonPropertiesForNamed",
      "properties": {
        "type": { "const": "boolean" },
        "labels": {
          "description": "A list of labels that name special values.",
          "type": "array",
          "items": { "$ref": "#/$defs/labeledBooleanType" },
          "uniqueItems": true,
          "maxItems": 2
        }
      },
      "unevaluatedProperties": false,
      "required": [ "type" ]
    },
    "bytesType": {
      "description": "A list of bytes. The minimum and maximum length properties are not required, but it is a good idea to specify their values for unknown bytes types.",
      "type": "object",
      "$ref": "#/$defs/commonPropertiesForNamed",
      "properties": {
        "type": { "const": "bytes" },
        "format": {
          "description": "This field describes how to interpret the value. It can be one of the bytes types defined in \"Table A-15: Data Type Defines\" of the RDM E1.20 specification (or other add-on specifications), or it can be something manufacturer-specific. Be aware, however, that anything not defined here may not be understood by a controller or UI. The known bytes types include: ipv4 (4 bytes), ipv6 (16 bytes), mac-address (6 bytes), uid (6 bytes), and uuid (16 bytes).",
          "type": "string"
        },
        "minLength": {
          "description": "The minimum bytes length. Care must be taken to make sure this doesn't contradict any \"maxLength\" value. It is an error if there is a contradiction.",
          "type": "integer",
          "minimum": 0
        },
        "maxLength": {
          "description": "The maximum bytes length. Care must be taken to make sure this doesn't contradict any \"minLength\" value. It is an error if there is a contradiction.",
          "type": "integer",
          "minimum": 0
        }
      },
      "unevaluatedProperties": false,
      "required": [ "type" ]
    },
    "commandType": {
      "description": "Represents the contents of an RDM command: 1. a collection of 'field' items, each a simple or compound type, 2. a single 'field' item, or 3. a duplicate command.",
      "oneOf": [
        {
          "type": "array",
          "items": { "$ref": "#/$defs/oneOfTypes" },
          "uniqueItems": true,
          "additionalItems": false
        },
        { "$ref": "#/$defs/oneOfTypes" },
        {
          "description": "Indicates that a command is a duplicate of one of the other commands. Using this feature can potentially save space.",
          "enum": [
            "get_request",
            "get_response",
            "set_request",
            "set_response"
          ]
        }
      ]
    },
    "commonPropertiesForNamed": {
      "description": "Defines a set of properties common to everything having a name.",
      "properties": {
        "name": { "$ref": "#/$defs/nameType" },
        "displayName": { "$ref": "#/$defs/nameType" },
        "notes": { "type": "string" },
        "resources": {
          "description": "Informative URLs pointing to a specification or more information for this field type.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uri-reference"
          },
          "additionalItems": false
        }
      }
    },
    "compoundType": {
      "description": "Defines a compound type, a type used to combine other types. This is useful for including in lists.",
      "type": "object",
      "$ref": "#/$defs/commonPropertiesForNamed",
      "properties": {
        "type": { "const": "compound" },
        "subtypes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/oneOfTypes"
          },
          "additionalItems": false
        }
      },
      "unevaluatedProperties": false,
      "required": [ "type", "subtypes" ]
    },
    "integerType": {
      "description": "A signed or unsigned integer, can have an optional prefix, unit, and range.",
      "type": "object",
      "$ref": "#/$defs/commonPropertiesForNamed",
      "properties": {
        "type": {
          "enum": [
            "int8",
            "int16",
            "int32",
            "int64",
            "uint8",
            "uint16",
            "uint32",
            "uint64"
          ]
        },
        "labels": {
          "description": "A list of labels that name special values.",
          "type": "array",
          "items": { "$ref": "#/$defs/labeledIntegerType" },
          "uniqueItems": true,
          "additionalItems": false
        },
        "restrictToLabeled": {
          "description": "Whether to restrict the allowed values to those that have labels. This is useful to not have to additionally specify a set of ranges. If this is set to \"true\" then \"ranges\" should not be specified.",
          "type": "boolean"
        },
        "ranges": {
          "description": "A list of possible ranges for the value. The complete range is the union of all the ranges. This should not be specified if \"restrictToLabeled\" is set to \"true\".",
          "type": "array",
          "items": { "$ref": "#/$defs/rangeType" },
          "uniqueItems": true,
          "additionalItems": false
        },
        "units": {
          "description": "The units type, defined in Table A-13 of E1.20.",
          "type": "integer",
          "minimum": 0,
          "maximum": 255
        },
        "prefixPower": {
          "description": "The power of 10 to be used as the prefix for the value. For example, -2 is used to represent 10^(-2) or the prefix centi-.",
          "type": "integer"
        },
        "prefixBase": {
          "description": "The base of the prefix. For example, to express \"kilo\", specify prefixPower=3 and prefixBase=10, and to express \"kibi\", specify prefixPower=10 and prefixBase=2 or prefixPower=1 and prefixBase=1024.",
          "type": "integer",
          "default": 10
        }
      },
      "unevaluatedProperties": false,
      "required": [ "type" ]
    },
    "labeledBooleanType": {
      "description": "Associates a name to a Boolean value.",
      "type": "object",
      "properties": {
        "label": { "$ref": "#/$defs/nameType" },
        "value": { "type": "boolean" },
        "notes": { "type": "string" }
      },
      "additionalProperties": false,
      "required": [ "label", "value" ]
    },
    "labeledIntegerType": {
      "description": "Associates a name to an integer value.",
      "type": "object",
      "properties": {
        "label": { "$ref": "#/$defs/nameType" },
        "value": { "type": "integer" },
        "notes": { "type": "string" }
      },
      "additionalProperties": false,
      "required": [ "label", "value" ]
    },
    "listType": {
      "description": "A list of objects all having the same type.",
      "type": "object",
      "$ref": "#/$defs/commonPropertiesForNamed",
      "properties": {
        "type": { "const": "list" },
        "itemType": { "$ref": "#/$defs/oneOfTypes" },
        "minItems": {
          "description": "The minimum list size.",
          "type": "integer",
          "minimum": 0
        },
        "maxItems": {
          "description": "The maximum list size.",
          "type": "integer",
          "minimum": 0
        }
      },
      "unevaluatedProperties": false,
      "required": [ "type", "itemType" ]
    },
    "nameType": {
      "description": "A name is a string having a length of at least 1.",
      "type": "string",
      "minLength": 1
    },
    "oneOfTypes": {
      "description": "One of any of the types. This provides a single location to keep the list.",
      "oneOf": [
        { "$ref": "#/$defs/bitFieldType" },
        { "$ref": "#/$defs/booleanType" },
        { "$ref": "#/$defs/bytesType" },
        { "$ref": "#/$defs/compoundType" },
        { "$ref": "#/$defs/integerType" },
        { "$ref": "#/$defs/listType" },
        { "$ref": "#/$defs/pdEnvelopeType" },
        { "$ref": "#/$defs/refType" },
        { "$ref": "#/$defs/stringType" }
      ]
    },
    "pdEnvelopeType": {
      "description": "Contains a length/data pair for one Parameter Data item, where the length is an unsigned 8-bit value and the data has 'length' bytes. This exists to provide a schema definition for the 'envelope' of a PDL/PD pair.",
      "type": "object",
      "$ref": "#/$defs/commonPropertiesForNamed",
      "properties": {
        "type": { "const": "pdEnvelope" },
        "length": {
          "description": "The data length can be optionally specified.",
          "type": "integer",
          "minimum": 0,
          "maximum": 255
        }
      },
      "unevaluatedProperties": false,
      "required": [ "type" ]
    },
    "rangeType": {
      "description": "Defines an inclusive range of numbers. If one of the bounds is undefined then it is assumed to be the bound appropriate for the type.",
      "type": "object",
      "properties": {
        "minimum": {
          "description": "The lower bound, inclusive.",
          "type": "integer"
        },
        "maximum": {
          "description": "The upper bound, inclusive.",
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "refType": {
      "description": "Specifies a reference to another value, a URI whose fragment part, if present, is a JSON pointer. See RFCs 3986 (URI Syntax) and 6901 (JSON Pointer).",
      "type": "object",
      "properties": {
        "$ref": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "additionalProperties": false,
      "required": [ "$ref" ]
    },
    "stringType": {
      "description": "A UTF-8-encoded string having a possibly bounded size. Implementations may need to use either a NUL terminator or another \"length\" field for multi-field messages where a string is followed by another field, so that its boundary can be determined.",
      "type": "object",
      "$ref": "#/$defs/commonPropertiesForNamed",
      "properties": {
        "type": { "const": "string" },
        "format": {
          "description": "This field describes how to interpret the string value. It can be one of the string types defined in \"Table A-15: Data Type Defines\" of the RDM E1.20 specification (or other add-on specifications), one of the defined formats from the JSON Schema Validation specification (https://json-schema.org/draft/2019-09/json-schema-validation.html#rfc.section.7.3), or it can be something manufacturer-specific. Be aware, however, that anything not defined here may not be understood by a controller or UI. The known string types from E1.20 (and add-ons) include: domain-name (https://tools.ietf.org/html/rfc2181#section-11), hostname (https://tools.ietf.org/html/rfc1123#section-2.1, https://tools.ietf.org/html/rfc5891#section-4.4), json (https://tools.ietf.org/html/rfc7159), string, and url (https://tools.ietf.org/html/rfc3986, https://tools.ietf.org/html/rfc1738).",
          "type": "string"
        },
        "pattern": {
          "description": "An ECMA-262 regular expression (https://www.ecma-international.org/publications/standards/Ecma-262.htm) that can be used to validate the contents of this field. They're helpful for assisting a controller or UI do message validation. It's not necessary to provide a pattern for known \"format\" types. Note that care must be taken to make sure that patterns don't contradict any \"minLength\" and \"maxLength\" values. It is an error if there is a contradiction. As well, if there are maximum or minimum sizes, it is suggested that an instance makes use of the \"minLength\" and \"maxLength\" sizes in order to support those UIs that don't support regexes.",
          "type": "string",
          "format": "regex"
        },
        "minLength": {
          "description": "The minimum string length. Care must be taken to make sure this doesn't contradict any \"pattern\" or \"maxLength\" values. It is an error if there is a contradiction. If there are maximum or minimum sizes, it is suggested that an instance makes use of the \"minLength\" and \"maxLength\" sizes in order to support those UIs that don't support regexes.",
          "type": "integer",
          "minimum": 0
        },
        "maxLength": {
          "description": "The maximum string length. Care must be taken to make sure this doesn't contradict any \"pattern\" or \"minLength\" values. It is an error if there is a contradiction. If there are maximum or minimum sizes, it is suggested that an instance makes use of the \"minLength\" and \"maxLength\" sizes in order to support those UIs that don't support regexes.",
          "type": "integer",
          "minimum": 0
        },
        "maxBytes": {
          "description": "In the case that the number of characters in the string is different from the number of bytes after UTF-8 encoding, we may need to specify a maximum encoded length.",
          "type": "integer",
          "minimum": 0
        },
        "restrictToASCII": {
          "description": "Indicates whether the string contents should be restricted to US-ASCII.",
          "type": "boolean"
        }
      },
      "unevaluatedProperties": false,
      "required": [ "type" ]
    },
    "subdeviceType": {
      "description": "Acceptable values for the subdevice in a GET or SET command. An empty list means allow nothing.",
      "type": "array",
      "items": {
        "enum": [
          "root",
          "subdevices",
          "broadcast"
        ]
      },
      "uniqueItems": true,
      "additionalItems": false
    }
  }
}
